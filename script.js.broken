// 全局变量
let currentUser = null;
let users = [];
let systemSettings = {};
let dataSourceConfig = {
    currentSource: 'local',
    localPath: '',
    remoteUrl: '',
    lastSync: null
};
let db = null;

// 数据库配置
let dbConfig = {
    type: 'sqlite', // 'sqlite', 'api', 'indexeddb'
    apiBase: 'http://localhost:3000/api',
    localDbName: 'priceSystemDB',
    version: 1
};

// 初始化
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing all features...');
    
    try {
        // 初始化事件监听器
        initializeEventListeners();
        
        // 初始化系统
        initializeSystem();
        loadData();
        showLoginPage();
        
        // 测试localStorage是否工作
        console.log('Testing localStorage...');
        try {
            localStorage.setItem('test', 'test');
            const testValue = localStorage.getItem('test');
            console.log('localStorage test:', testValue === 'test' ? 'PASSED' : 'FAILED');
            localStorage.removeItem('test');
        } catch (e) {
            console.error('localStorage test failed:', e);
        }
        
        // 加载配置到界面
        if (localStorage.getItem('dbConfig')) {
            const savedDbConfig = JSON.parse(localStorage.getItem('dbConfig'));
            const dbTypeElement = safeGetElement('dbType');
            if (dbTypeElement) {
                dbTypeElement.value = savedDbConfig.type;
            }
            
            const apiBaseElement = safeGetElement('apiBaseUrl');
            if (apiBaseElement && savedDbConfig.apiBase) {
                apiBaseElement.value = savedDbConfig.apiBase;
            }
            toggleDatabaseConfig();
        }
        
        if (localStorage.getItem('dataSourceConfig')) {
            const savedDataSourceConfig = JSON.parse(localStorage.getItem('dataSourceConfig'));
            const dataSourceTypeElement = safeGetElement('dataSourceType');
            if (dataSourceTypeElement) {
                dataSourceTypeElement.value = savedDataSourceConfig.currentSource;
            }
            
            // 根据保存的配置显示对应区域
            toggleDataSourceConfig();
            
            // 如果有保存的远程URL，设置到输入框
            const remoteUrlElement = safeGetElement('remoteUrl');
            if (remoteUrlElement && savedDataSourceConfig.remoteUrl) {
                remoteUrlElement.value = savedDataSourceConfig.remoteUrl;
            }
        }
        
        // 延迟执行，确保DOM完全加载
        setTimeout(() => {
            setDefaultDates();
        }, 100);
        
        // 初始化数据库状态
        setTimeout(refreshDatabaseStatus, 1000);
        
        console.log('All features initialized successfully');
        
    } catch (error) {
        console.error('Error during initialization:', error);
    }
});

// 设置默认日期
function setDefaultDates() {
    const today = new Date();
    const validUntil = new Date();
    validUntil.setDate(today.getDate() + 30); // 30天后有效
    
    const todayStr = today.toISOString().split('T')[0];
    const validUntilStr = validUntil.toISOString().split('T')[0];
    
    const quotationDateInput = document.getElementById('quotationDate');
    const validUntilInput = document.getElementById('validUntil');
    
    if (quotationDateInput) {
        quotationDateInput.value = todayStr;
    }
    if (validUntilInput) {
        validUntilInput.value = validUntilStr;
    }
}

// 安全DOM访问函数
function safeGetElement(id, fallback = null) {
    try {
        const element = document.getElementById(id);
        if (!element) {
            console.warn(`Element with id '${id}' not found`);
            return fallback;
        }
        return element;
    } catch (error) {
        console.error(`Error getting element '${id}':`, error);
        return fallback;
    }
}

// 初始化事件监听器
function initializeEventListeners() {
    try {
        const taxRateElement = safeGetElement('taxRate');
        const shippingFeeElement = safeGetElement('shippingFee');
        
        if (taxRateElement) {
            taxRateElement.addEventListener('input', updateQuotationSummary);
            console.log('Tax rate listener initialized');
        } else {
            console.warn('Tax rate element not found');
        }
        
        if (shippingFeeElement) {
            shippingFeeElement.addEventListener('input', updateQuotationSummary);
            console.log('Shipping fee listener initialized');
        } else {
            console.warn('Shipping fee element not found');
        }
        
    } catch (error) {
        console.error('Error initializing event listeners:', error);
    }
}

// 系统初始化
function initializeSystem() {
    try {
        console.log('Initializing system...');
        
        // 清理旧的localStorage数据
        clearOldData();
        
        // 初始化数据库
        initializeDatabase();
        
        // 加载必要数据
        loadData();
        
        console.log('System initialized successfully');
        
    } catch (error) {
        console.error('Error initializing system:', error);
    }
}

// 清理旧的localStorage数据
function clearOldData() {
    try {
        console.log('Cleaning up old localStorage data...');
        
        // 清理旧的价格表数据
        if (localStorage.getItem('priceTable')) {
            const oldPriceData = JSON.parse(localStorage.getItem('priceTable'));
            console.log(`Found ${oldPriceData.length} old price entries, clearing...`);
            localStorage.removeItem('priceTable');
        }
        
        // 清理旧的产品数据
        if (localStorage.getItem('products')) {
            const oldProducts = JSON.parse(localStorage.getItem('products'));
            console.log(`Found ${oldProducts.length} old product entries, clearing...`);
            localStorage.removeItem('products');
        }
        
        // 清理旧的价目表显示
        const priceTableDisplay = document.getElementById('priceTableDisplay');
        if (priceTableDisplay) {
            priceTableDisplay.innerHTML = `
                <div class="info-message" style="text-align: center; padding: 20px; color: #666;">
                    <h4>🔄 数据迁移完成</h4>
                    <p>旧的价格数据已迁移到SQLite数据库</p>
                    <p>请使用"数据源配置"功能导入新的价格数据</p>
                    <p style="font-size: 12px; color: #999;">系统将自动清理旧的localStorage数据</p>
                </div>
            `;
        }
        
        // 清理其他可能存在的旧数据
        const oldDataKeys = [
            'priceReaderConfig',
            'oldPriceData',
            'tempPriceData'
        ];
        
        oldDataKeys.forEach(key => {
            if (localStorage.getItem(key)) {
                console.log(`Clearing old data key: ${key}`);
                localStorage.removeItem(key);
            }
        });
        
        console.log('Old data cleanup completed');
        
    } catch (error) {
        console.error('Error during old data cleanup:', error);
    }
}

// 数据库管理函数
async function initializeDatabase() {
    try {
        console.log('Initializing SQLite database...');
        
        // 检查SQL.js是否已加载
        if (typeof initSqlJs === 'undefined') {
            console.error('SQL.js library not found');
            return false;
        }
        
        // 尝试从IndexedDB加载已保存的数据库
        const databaseData = await loadDatabaseFromIndexedDB();
        
        if (databaseData) {
            console.log('Found saved database, loading...');
        } else {
            console.log('No saved database found, creating new one');
        }
        
        // 初始化SQL.js
        const SQL = await initSqlJs({
            locateFile: file => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.8.0/${file}`
        });
        
        // 创建数据库实例
        if (databaseData) {
            db = new SQL.Database(databaseData);
            console.log('Database loaded from saved data');
        } else {
            db = new SQL.Database();
            console.log('New database created');
        }
        
        // 创建表结构
        createDatabaseTables();
        
        // 检查是否有现有数据需要导入
        await checkAndImportExistingData();
        
        console.log('Database initialized successfully');
        return true;
        
    } catch (error) {
        console.error('Error initializing database:', error);
        return false;
    }
}

// 创建数据库表结构
function createDatabaseTables() {
    try {
        // 创建价目表
        db.run(`
            CREATE TABLE IF NOT EXISTS price_table (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                category TEXT NOT NULL,
                system TEXT,
                code1 TEXT,
                code2 TEXT,
                width_min REAL NOT NULL,
                width_max REAL NOT NULL,
                height_min REAL NOT NULL,
                height_max REAL NOT NULL,
                price REAL NOT NULL,
                effective_date DATE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);
        
        // 创建数据源配置表
        db.run(`
            CREATE TABLE IF NOT EXISTS data_sources (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                type TEXT NOT NULL,
                path TEXT NOT NULL,
                last_sync DATETIME,
                is_active BOOLEAN DEFAULT 1
            )
        `);
        
        // 创建索引以提高查询性能
        db.run('CREATE INDEX IF NOT EXISTS idx_category ON price_table(category)');
        db.run('CREATE INDEX IF NOT EXISTS idx_dimensions ON price_table(width_min, width_max, height_min, height_max)');
        db.run('CREATE INDEX IF NOT EXISTS idx_price ON price_table(price)');
        
        console.log('Database tables created successfully');
        
    } catch (error) {
        console.error('Error creating database tables:', error);
    }
}

// 检查并导入现有数据
async function checkAndImportExistingData() {
    try {
        // 检查localStorage中是否有价目表数据
        const existingPriceTable = localStorage.getItem('priceTable');
        if (existingPriceTable) {
            const priceData = JSON.parse(existingPriceTable);
            if (priceData.length > 0) {
                console.log('Importing existing price data to database...');
                await importPriceDataToDatabase(priceData);
                
                // 导入成功后清除localStorage中的数据
                localStorage.removeItem('priceTable');
                console.log('Existing price data imported to database and cleared from localStorage');
            }
        }
        
        // 检查是否有配置的数据源文件需要导入
        if (dataSourceConfig.currentSource === 'local' && dataSourceConfig.localPath) {
            await importDataFromFile(dataSourceConfig.localPath);
        }
        
    } catch (error) {
        console.error('Error importing existing data:', error);
    }
}

// 将价目表数据导入数据库
async function importPriceDataToDatabase(priceData) {
    try {
        if (!db) {
            console.error('Database not initialized');
            return false;
        }
        
        // 开始事务
        db.run('BEGIN TRANSACTION');
        
        // 清空现有数据
        db.run('DELETE FROM price_table');
        
        // 插入新数据
        const stmt = db.prepare(`
            INSERT INTO price_table (category, system, code1, code2, width_min, width_max, height_min, height_max, price)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        `);
        
        let successCount = 0;
        priceData.forEach(item => {
            try {
                if (item.category && item.width_min && item.width_max && item.height_min && item.height_max && item.price) {
                    stmt.run([
                        item.category,
                        item.system || '',
                        item.code1 || '',
                        item.code2 || '',
                        item.width_min,
                        item.width_max,
                        item.height_min,
                        item.height_max,
                        item.price
                    ]);
                    successCount++;
                } else {
                    console.warn('Skipping invalid item:', item);
                }
            } catch (rowError) {
                console.warn('Error inserting row:', rowError, item);
            }
        });
        
        stmt.free();
        
        // 提交事务
        db.run('COMMIT');
        
        console.log(`Database import summary:`);
        console.log(`   - Total items to import: ${priceData.length}`);
        console.log(`   - Successfully imported: ${successCount}`);
        console.log(`   - Failed to import: ${priceData.length - successCount}`);
        
        // 保存数据库到localStorage
        saveDatabaseToIndexedDB();
        
        console.log(`Successfully imported ${successCount} price entries to database`);
        return true;
        
    } catch (error) {
        console.error('Error importing price data to database:', error);
        // 回滚事务
        if (db) {
            db.run('ROLLBACK');
        }
        return false;
    }
}

// 保存数据库到IndexedDB
async function saveDatabaseToIndexedDB() {
    try {
        if (!db) {
            console.warn('Database not initialized, cannot save');
            return;
        }
        
        // 导出数据库
        const databaseData = db.export();
        
        // 压缩数据库数据（使用简单的压缩策略）
        const compressedData = compressDatabaseData(databaseData);
        
        console.log(`Database size: ${databaseData.length} bytes, Compressed: ${compressedData.length} bytes`);
        
        // 使用IndexedDB保存
        const dbName = 'PromoteAppDB';
        const storeName = 'sqliteDatabase';
        const version = 1;
        
        return new Promise((resolve, reject) => {
            const request = indexedDB.open(dbName, version);
            
            request.onerror = () => {
                console.error('Failed to open IndexedDB:', request.error);
                reject(request.error);
            };
            
            request.onsuccess = () => {
                const db = request.result;
                const transaction = db.transaction([storeName], 'readwrite');
                const store = transaction.objectStore(storeName);
                
                const saveRequest = store.put(compressedData, 'main');
                
                saveRequest.onsuccess = () => {
                    console.log('Database saved to IndexedDB successfully');
                    resolve();
                };
                
                saveRequest.onerror = () => {
                    console.error('Failed to save database to IndexedDB:', saveRequest.error);
                    reject(saveRequest.error);
                };
                
                transaction.oncomplete = () => {
                    db.close();
                };
            };
            
            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                if (!db.objectStoreNames.contains(storeName)) {
                    db.createObjectStore(storeName);
                }
            };
        });
        
    } catch (error) {
        console.error('Error saving database to IndexedDB:', error);
        throw error;
    }
}

// 压缩数据库数据
function compressDatabaseData(data) {
    try {
        // 使用简单的压缩策略：去除重复字节模式
        const compressed = [];
        let i = 0;
        
        while (i < data.length) {
            let count = 1;
            const currentByte = data[i];
            
            // 计算连续相同字节的数量
            while (i + count < data.length && data[i + count] === currentByte && count < 255) {
                count++;
            }
            
            if (count > 3) {
                // 使用RLE压缩
                compressed.push(0, count, currentByte);
                i += count;
            } else {
                compressed.push(currentByte);
                i++;
            }
        }
        
        return new Uint8Array(compressed);
        
    } catch (error) {
        console.error('Error compressing database data:', error);
        return data; // 如果压缩失败，返回原始数据
    }
}

// 解压缩数据库数据
function decompressDatabaseData(compressedData) {
    try {
        const decompressed = [];
        let i = 0;
        
        while (i < compressedData.length) {
            if (compressedData[i] === 0 && i + 2 < compressedData.length) {
                // RLE解压缩
                const count = compressedData[i + 1];
                const byte = compressedData[i + 2];
                
                for (let j = 0; j < count; j++) {
                    decompressed.push(byte);
                }
                
                i += 3;
            } else {
                decompressed.push(compressedData[i]);
                i++;
            }
        }
        
        return new Uint8Array(decompressed);
        
    } catch (error) {
        console.error('Error decompressing database data:', error);
        return compressedData; // 如果解压缩失败，返回原始数据
    }
}

// 从IndexedDB加载数据库
async function loadDatabaseFromIndexedDB() {
    try {
        const dbName = 'PromoteAppDB';
        const storeName = 'sqliteDatabase';
        const version = 1;
        
        return new Promise((resolve, reject) => {
            const request = indexedDB.open(dbName, version);
            
            request.onerror = () => {
                console.log('IndexedDB not available, creating new database');
                resolve(null);
            };
            
            request.onsuccess = () => {
                const db = request.result;
                const transaction = db.transaction([storeName], 'readonly');
                const store = transaction.objectStore(storeName);
                
                const loadRequest = store.get('main');
                
                loadRequest.onsuccess = () => {
                    if (loadRequest.result) {
                        console.log('Database loaded from IndexedDB successfully');
                        // 解压缩数据
                        const decompressedData = decompressDatabaseData(loadRequest.result);
                        resolve(decompressedData);
                    } else {
                        console.log('No saved database found in IndexedDB');
                        resolve(null);
                    }
                };
                
                loadRequest.onerror = () => {
                    console.error('Failed to load database from IndexedDB:', loadRequest.error);
                    resolve(null);
                };
                
                transaction.oncomplete = () => {
                    db.close();
                };
            };
            
            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                if (!db.objectStoreNames.contains(storeName)) {
                    db.createObjectStore(storeName);
                }
            };
        });
        
    } catch (error) {
        console.error('Error loading database from IndexedDB:', error);
        return null;
    }
}

// 更新报价单汇总
function updateQuotationSummary() {
    try {
        let subtotal = 0;
        
        document.querySelectorAll('.product-item').forEach(item => {
            const subtotalInput = item.querySelectorAll('input')[4];  // 总价输入框
            if (subtotalInput && subtotalInput.value && subtotalInput.value !== '$0.00' && subtotalInput.value !== '') {
                // 提取数字部分
                const subtotalValue = parseFloat(subtotalInput.value.replace(/[$,]/g, ''));
                if (!isNaN(subtotalValue) && subtotalValue > 0) {
                    subtotal += subtotalValue;
                }
            }
        });
        
        const taxRateElement = safeGetElement('taxRate');
        const shippingFeeElement = safeGetElement('shippingFee');
        const subtotalElement = safeGetElement('subtotal');
        const taxAmountElement = safeGetElement('taxAmount');
        const totalAmountElement = safeGetElement('totalAmount');
        
        if (!taxRateElement || !shippingFeeElement || !subtotalElement || !taxAmountElement || !totalAmountElement) {
            console.warn('Some summary elements not found');
            return;
        }
        
        const taxRate = parseFloat(taxRateElement.value) || 0;
        const shippingFee = parseFloat(shippingFeeElement.value) || 0;
        
        const taxAmount = subtotal * (taxRate / 100);
        const totalAmount = subtotal + taxAmount + shippingFee;
        
        subtotalElement.textContent = formatCurrency(subtotal);
        taxAmountElement.textContent = formatCurrency(taxAmount);
        totalAmountElement.textContent = formatCurrency(totalAmount);
        
    } catch (error) {
        console.error('Error updating quotation summary:', error);
    }
}

// 加载数据
function loadData() {
    try {
        // 加载用户数据
        users = JSON.parse(localStorage.getItem('users') || '[]');
        
        // 加载系统设置
        systemSettings = JSON.parse(localStorage.getItem('systemSettings') || '{}');
        
        // 加载数据源配置
        if (localStorage.getItem('dataSourceConfig')) {
            dataSourceConfig = JSON.parse(localStorage.getItem('dataSourceConfig'));
        }
        
        console.log('Data loaded - Users:', users.length, 'entries');
        console.log('Data loaded - System Settings:', Object.keys(systemSettings).length, 'entries');
        
    } catch (error) {
        console.error('Error loading data:', error);
    }
}

// 从文件导入数据
async function importDataFromFile(filePath) {
    try {
        console.log('Importing data from file:', filePath);
        
        // 这里是一个占位符实现
        // 实际的文件导入逻辑在processImportFileAsync中
        console.log('File import initiated from path:', filePath);
        
    } catch (error) {
        console.error('Error importing data from file:', error);
    }
}

// 用户登录
function login() {
    try {
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        
        if (!username || !password) {
            alert('请输入用户名和密码');
            return;
        }
        
        // 确保用户数据已加载
        if (!users || users.length === 0) {
            users = JSON.parse(localStorage.getItem('users') || '[]');
        }
        
        console.log('Available users:', users);
        console.log('Attempting login with:', username, password);
        
        const user = users.find(u => u.username === username && u.password === password);
        
        if (user) {
            console.log('Login successful:', user);
            currentUser = user;
            localStorage.setItem('currentUser', JSON.stringify(user));
            
            if (user.role === 'admin') {
                showAdminBackend();
            } else {
                showSalesFrontend();
            }
        } else {
            console.log('Login failed - no matching user found');
            alert('用户名或密码错误');
        }
        
    } catch (error) {
        console.error('Error during login:', error);
        alert('登录过程中发生错误');
    }
}

// 显示登录页面
function showLoginPage() {
    try {
        document.getElementById('loginPage').style.display = 'flex';
        document.getElementById('salesFrontend').style.display = 'none';
        document.getElementById('adminBackend').style.display = 'none';
    } catch (error) {
        console.error('Error showing login page:', error);
    }
}

// 显示销售员前台
function showSalesFrontend() {
    try {
        document.getElementById('loginPage').style.display = 'none';
        document.getElementById('salesFrontend').style.display = 'block';
        document.getElementById('adminBackend').style.display = 'none';
        
        const currentUserElement = document.getElementById('currentUser');
        if (currentUserElement) {
            currentUserElement.textContent = `${currentUser.realName} (${currentUser.username})`;
        }
        
        // 初始化快速查价
        initializePricingRows();
        
    } catch (error) {
        console.error('Error showing sales frontend:', error);
    }
}

// 显示管理员后台
function showAdminBackend() {
    try {
        document.getElementById('loginPage').style.display = 'none';
        document.getElementById('salesFrontend').style.display = 'none';
        document.getElementById('adminBackend').style.display = 'block';
        
        const adminUserElement = document.getElementById('adminUser');
        if (adminUserElement) {
            adminUserElement.textContent = `${currentUser.realName} (${currentUser.username})`;
        }
        
        // 加载管理数据
        loadAdminData();
        
    } catch (error) {
        console.error('Error showing admin backend:', error);
    }
}

// 格式化货币
function formatCurrency(amount) {
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
    }).format(amount);
}

// 加载管理数据
function loadAdminData() {
    try {
        console.log('Loading admin data...');
        
        // 这里可以添加加载管理员特定数据的逻辑
        // 例如：加载推广设计、用户管理、报价管理等数据
        
        console.log('Admin data loaded successfully');
        
    } catch (error) {
        console.error('Error loading admin data:', error);
    }
}

// 初始化快速查价行
function initializePricingRows() {
    try {
        const container = document.getElementById('pricingRows');
        if (!container) {
            console.log('pricingRows container not found, skipping initialization');
            return;
        }
        
        container.innerHTML = '';
        addPricingRow(); // 添加第一行
        
    } catch (error) {
        console.error('Error initializing pricing rows:', error);
    }
}

// 添加查价行
function addPricingRow() {
    try {
        const container = document.getElementById('pricingRows');
        if (!container) {
            console.log('pricingRows container not found, skipping addPricingRow');
            return;
        }
        
        const rowId = Date.now();
        const rowNumber = container.children.length + 1;
        
        // 从数据库获取类别选项
        const categories = db ? getAllCategoriesFromDatabase() : [];
        
        const rowHtml = `
            <div class="pricing-row" id="pricing-row-${rowId}">
                <div class="pricing-row-content">
                    <div class="form-group">
                        <label>No.:</label>
                        <input type="text" value="${rowNumber}" readonly style="text-align: center; background: #f8f9fa;">
                    </div>
                    <div class="form-group">
                        <label>Category:</label>
                        <select onchange="updatePricingRow(${rowId})">
                            <option value="">Select Category</option>
                            ${categories.map(cat => `<option value="${cat}">${cat}</option>`).join('')}
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Width:</label>
                        <input type="number" step="0.01" placeholder="Width" onchange="updatePricingRow(${rowId})">
                    </div>
                    <div class="form-group">
                        <label>Width Unit:</label>
                        <select onchange="updatePricingRow(${rowId})">
                            <option value="cm">cm</option>
                            <option value="in">in</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Height:</label>
                        <input type="number" step="0.01" placeholder="Height" onchange="updatePricingRow(${rowId})">
                    </div>
                    <div class="form-group">
                        <label>Height Unit:</label>
                        <select onchange="updatePricingRows">
                            <option value="cm">cm</option>
                            <option value="in">in</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Quantity:</label>
                        <input type="number" min="1" value="1" onchange="updatePricingRow(${rowId})">
                    </div>
                    <div class="form-group">
                        <label>Unit Price:</label>
                        <input type="text" readonly class="currency">
                    </div>
                    <div class="form-group">
                        <label>Subtotal:</label>
                        <input type="text" readonly class="currency">
                    </div>
                    <div class="form-group">
                        <label>Total:</label>
                        <input type="text" readonly class="currency">
                    </div>
                    <div class="form-group">
                        <button onclick="removePricingRow(${rowId})" class="btn-danger">Remove</button>
                    </div>
                </div>
            </div>
        `;
        
        container.insertAdjacentHTML('beforeend', rowHtml);
        
    } catch (error) {
        console.error('Error adding pricing row:', error);
    }
}

// 更新查价行
function updatePricingRow(rowId) {
    try {
        const row = document.getElementById(`pricing-row-${rowId}`);
        if (!row) return;
        
        // 这里可以添加价格查询逻辑
        console.log(`Updating pricing row ${rowId}`);
        
    } catch (error) {
        console.error('Error updating pricing row:', error);
    }
}

// 移除查价行
function removePricingRow(rowId) {
    try {
        const row = document.getElementById(`pricing-row-${rowId}`);
        if (row) {
            row.remove();
        }
    } catch (error) {
        console.error('Error removing pricing row:', error);
    }
}

// 切换数据库配置显示
function toggleDatabaseConfig() {
    try {
        const dbType = document.getElementById('dbType').value;
        const apiUrlGroup = document.getElementById('apiUrlGroup');
        const apiAuthGroup = document.getElementById('apiAuthGroup');
        
        if (apiUrlGroup && apiAuthGroup) {
            if (dbType === 'api') {
                apiUrlGroup.style.display = 'block';
                apiAuthGroup.style.display = 'block';
            } else {
                apiUrlGroup.style.display = 'none';
                apiAuthGroup.style.display = 'none';
            }
        }
        
    } catch (error) {
        console.error('Error toggling database config:', error);
    }
}

// 切换数据源配置显示
function toggleDataSourceConfig() {
    try {
        const dataSourceType = document.getElementById('dataSourceType').value;
        const localFileConfig = document.getElementById('localFileConfig');
        const remoteServerConfig = document.getElementById('remoteServerConfig');
        
        if (localFileConfig && remoteServerConfig) {
            if (dataSourceType === 'local') {
                localFileConfig.style.display = 'block';
                remoteServerConfig.style.display = 'none';
            } else {
                localFileConfig.style.display = 'none';
                remoteServerConfig.style.display = 'block';
            }
        }
        
    } catch (error) {
        console.error('Error toggling data source config:', error);
    }
}

// 保存数据库配置
function saveDatabaseConfig() {
    try {
        const dbType = document.getElementById('dbType').value;
        const apiBaseUrl = document.getElementById('apiBaseUrl').value;
        const apiKey = document.getElementById('apiKey').value;
        
        const config = {
            type: dbType,
            apiBase: apiBaseUrl,
            apiKey: apiKey
        };
        
        localStorage.setItem('dbConfig', JSON.stringify(config));
        console.log('Database configuration saved successfully');
        alert('数据库配置保存成功！');
        
    } catch (error) {
        console.error('Error saving database config:', error);
        alert('保存数据库配置时发生错误');
    }
}

// 测试数据库连接
function testDatabaseConnection() {
    try {
        const dbType = document.getElementById('dbType').value;
        
        if (dbType === 'sqlite') {
            if (db) {
                alert('SQLite数据库连接正常！');
            } else {
                alert('SQLite数据库未初始化！');
            }
        } else if (dbType === 'api') {
            const apiBaseUrl = document.getElementById('apiBaseUrl').value;
            if (!apiBaseUrl) {
                alert('请输入API基础URL！');
                return;
            }
            
            // 这里可以添加实际的API连接测试
            alert('API连接测试功能待实现');
            
        } else {
            alert('未知的数据库类型！');
        }
        
    } catch (error) {
        console.error('Error testing database connection:', error);
        alert('测试数据库连接时发生错误');
    }
}

// 保存数据源配置
function saveDataSourceConfig() {
    try {
        const dataSourceType = document.getElementById('dataSourceType');
        const mainFileInput = document.getElementById('mainFileInput');
        const remoteUrl = document.getElementById('remoteUrl');
        
        if (!dataSourceType) {
            alert('数据源类型选择器未找到！');
            return;
        }
        
        let localPath = '';
        if (mainFileInput && mainFileInput.files.length > 0) {
            localPath = mainFileInput.files[0].name;
        }
        
        const config = {
            currentSource: dataSourceType.value,
            localPath: localPath,
            remoteUrl: remoteUrl ? remoteUrl.value : '',
            lastSync: new Date().toISOString()
        };
        
        localStorage.setItem('dataSourceConfig', JSON.stringify(config));
        dataSourceConfig = config;
        
        console.log('Data source configuration saved successfully');
        alert('数据源配置保存成功！');
        
    } catch (error) {
        console.error('Error saving data source config:', error);
        alert('保存数据源配置时发生错误');
    }
}

// 从数据源导入数据
async function importDataFromSource() {
    try {
        const dataSourceType = document.getElementById('dataSourceType').value;
        
        if (dataSourceType === 'local') {
            const fileInput = document.getElementById('mainFileInput');
            if (fileInput && fileInput.files.length > 0) {
                await processImportFileAsync(fileInput.files[0]);
            } else {
                alert('请先选择要导入的文件！');
            }
        } else if (dataSourceType === 'remote') {
            const remoteUrl = document.getElementById('remoteUrl').value;
            if (!remoteUrl) {
                alert('请输入远程服务器URL！');
                return;
            }
            
            // 这里可以添加远程数据导入逻辑
            alert('远程数据导入功能待实现');
            
        } else {
            alert('请选择数据源类型！');
        }
        
    } catch (error) {
        console.error('Error importing data from source:', error);
        alert('导入数据时发生错误');
    }
}

// 处理文件选择
function handleFileSelection(fileInput) {
    try {
        const file = fileInput.files[0];
        if (file) {
            displayFileInfo(file);
            autoSetFileFormat(file);
            
            console.log('File selected:', file.name, 'Size:', file.size, 'bytes');
        }
    } catch (error) {
        console.error('Error handling file selection:', error);
    }
}

// 显示文件信息
function displayFileInfo(file) {
    try {
        const fileInfo = document.getElementById('fileInfo');
        if (fileInfo) {
            fileInfo.innerHTML = `
                <p><strong>文件名:</strong> ${file.name}</p>
                <p><strong>大小:</strong> ${formatFileSize(file.size)}</p>
                <p><strong>类型:</strong> ${file.type || '未知'}</p>
            `;
            fileInfo.style.display = 'block';
        }
    } catch (error) {
        console.error('Error displaying file info:', error);
    }
}

// 自动设置文件格式
function autoSetFileFormat(file) {
    try {
        const fileFormat = document.getElementById('fileFormat');
        if (fileFormat) {
            const extension = file.name.split('.').pop().toLowerCase();
            if (extension === 'xlsx' || extension === 'xls') {
                fileFormat.value = 'excel';
            } else if (extension === 'csv') {
                fileFormat.value = 'csv';
            }
        }
    } catch (error) {
        console.error('Error auto-setting file format:', error);
    }
}

// 清除文件选择
function clearFileSelection() {
    try {
        const fileInput = document.getElementById('mainFileInput');
        const fileInfo = document.getElementById('fileInfo');
        
        if (fileInput) fileInput.value = '';
        if (fileInfo) fileInfo.style.display = 'none';
        
        console.log('File selection cleared');
    } catch (error) {
        console.error('Error clearing file selection:', error);
    }
}

// 格式化文件大小
function formatFileSize(bytes) {
    try {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        
    } catch (error) {
        console.error('Error formatting file size:', error);
        return bytes + ' bytes';
    }
}
